//Áªô‰Ω†‰∏§‰∏™ ÈùûÁ©∫ ÈìæË°®Êù•‰ª£Ë°®‰∏§‰∏™ÈùûË¥üÊï¥Êï∞„ÄÇÊï∞Â≠óÊúÄÈ´ò‰Ωç‰Ωç‰∫éÈìæË°®ÂºÄÂßã‰ΩçÁΩÆ„ÄÇÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™Â≠òÂÇ®‰∏Ä‰ΩçÊï∞Â≠ó„ÄÇÂ∞ÜËøô‰∏§Êï∞Áõ∏Âä†‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®„ÄÇ 
//
// ‰Ω†ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞Â≠óÈÉΩ‰∏ç‰ºö‰ª•Èõ∂ÂºÄÂ§¥„ÄÇ 
//
// 
//
// ËøõÈò∂Ôºö 
//
// Â¶ÇÊûúËæìÂÖ•ÈìæË°®‰∏çËÉΩ‰øÆÊîπËØ•Â¶Ç‰ΩïÂ§ÑÁêÜÔºüÊç¢Âè•ËØùËØ¥Ôºå‰Ω†‰∏çËÉΩÂØπÂàóË°®‰∏≠ÁöÑËäÇÁÇπËøõË°åÁøªËΩ¨„ÄÇ 
//
// 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 8 -> 0 -> 7
// 
// Related Topics ÈìæË°® 
// üëç 353 üëé 0

package com.tomster.leetcode.editor.cn;

import com.tomster.leetcode.entity.ListNode;

import java.util.LinkedList;

/**
 * @author: tomster
 * @data: 2021-03-14 14:12:25
 */
public class AddTwoNumbersIi {
    public static void main(String[] args) {
        Solution solution = new AddTwoNumbersIi().new Solution();
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode(int x) { val = x; }
     * }
     */
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            LinkedList<Integer> deque1 = new LinkedList<>();
            LinkedList<Integer> deque2 = new LinkedList<>();
            while (l1 != null) {
                deque1.addLast(l1.val);
                l1 = l1.next;
            }
            while (l2 != null) {
                deque2.addLast(l2.val);
                l2 = l2.next;
            }
            int carry = 0;
            ListNode result = null;
            while (!deque1.isEmpty() || !deque2.isEmpty() || carry != 0) {
                int num1 = deque1.isEmpty() ? 0 : deque1.pollLast();
                int num2 = deque2.isEmpty() ? 0 : deque2.pollLast();
                int sum = carry + num1 + num2;
                carry = sum / 10;
                ListNode node = new ListNode(sum % 10);
                node.next = result;
                result = node;
            }
            return result;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}