//ÁªôÂÆö‰∏Ä‰∏™ÂçïÈìæË°® LÔºöL0‚ÜíL1‚Üí‚Ä¶‚ÜíLn-1‚ÜíLn Ôºå 
//Â∞ÜÂÖ∂ÈáçÊñ∞ÊéíÂàóÂêéÂèò‰∏∫Ôºö L0‚ÜíLn‚ÜíL1‚ÜíLn-1‚ÜíL2‚ÜíLn-2‚Üí‚Ä¶ 
//
// ‰Ω†‰∏çËÉΩÂè™ÊòØÂçïÁ∫ØÁöÑÊîπÂèòËäÇÁÇπÂÜÖÈÉ®ÁöÑÂÄºÔºåËÄåÊòØÈúÄË¶ÅÂÆûÈôÖÁöÑËøõË°åËäÇÁÇπ‰∫§Êç¢„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->4->2->3. 
//
// Á§∫‰æã 2: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4->5, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->5->2->4->3. 
// Related Topics ÈìæË°® 
// üëç 541 üëé 0

package com.tomster.leetcode.editor.cn;

import com.tomster.leetcode.entity.ListNode;

import java.util.LinkedList;

/**
 * @author: tomster
 * @data: 2021-03-22 18:45:57
 */
public class ReorderList {
    public static void main(String[] args) {
        Solution solution = new ReorderList().new Solution();
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public void reorderList(ListNode head) {
            if (head == null || head.next == null) {
                return;
            }
            LinkedList<ListNode> deque = new LinkedList<>();
            ListNode cur = head;
            while (cur != null) {
                deque.addLast(cur);
                cur = cur.next;
            }
            boolean firstPoll = true;
            ListNode pilot = new ListNode(0);
            ListNode pre = pilot;
            while (!deque.isEmpty()) {
                ListNode curPoll = firstPoll ? deque.pollFirst() : deque.pollLast();
                curPoll.next = null;
                pre.next = curPoll;
                pre = curPoll;
                firstPoll = !firstPoll;

            }

        }
    }

//leetcode submit region end(Prohibit modification and deletion)

}